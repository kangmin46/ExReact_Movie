{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","title","Poster","genres","summary","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","Moviegenres","key","_ref2","src","_ref3","PropType","poster","string","isRequired","Description","App","state","_setMovie","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","this","_loadComponent","movie","src_Movie","title_english","large_cover_image","id","fetch","then","response","json","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PCOxC,SAASC,EAATC,GAA8C,IAA7BC,EAA6BD,EAA7BC,MAAMC,EAAuBF,EAAvBE,OAAOC,EAAgBH,EAAhBG,OAAOC,EAASJ,EAATI,QACjC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAOT,KAEzCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,UAAKN,IAELI,EAAAC,EAAAC,cAAA,WACKJ,EAAOQ,IAAI,SAACC,EAAMC,GAAP,OAAiBR,EAAAC,EAAAC,cAACO,EAAD,CAAaF,MAAOA,EAAOG,IAAKF,OAEjER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACZJ,IAKT,SAASK,EAATO,GAAkC,IAAZd,EAAYc,EAAZd,OAAOQ,EAAKM,EAALN,IACzB,OACIL,EAAAC,EAAAC,cAAA,OAAKU,IAAMf,EAAQQ,IAAKA,IAKhC,SAASI,EAATI,GAA6B,IAAPN,EAAOM,EAAPN,MAClB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,GAIxCH,EAAYU,SAAW,CACnBC,OAAQD,IAASE,OAAOC,YAE5BR,EAAYK,SAAW,CACnBhB,OAAQgB,IAASE,OAAOC,YAG5BvB,EAAMoB,SAAW,CACblB,MAAMkB,IAASE,OAAOC,WACtBF,OAAOD,IAASE,OAAOC,WACvBC,YAAcJ,IAASE,OAAOC,YAEnBvB,QCEAyB,6MA7CbC,MAAQ,KAEVC,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEWC,EAAKC,WAFhB,OAEJP,EAFIG,EAAAK,KAGVC,QAAQC,IAAIV,GACZM,EAAKK,SAAS,CACZX,WALQ,wBAAAG,EAAAS,SAAAb,EAAAc,WASZC,eAAiB,WAUf,OATeR,EAAKT,MAAMG,OAAOjB,IAAI,SAACgC,GACpC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,CACP3C,MAAO0C,EAAME,cACb3C,OAAUyC,EAAMG,kBAChB/B,IAAO4B,EAAMI,GACb5C,OAAUwC,EAAMxC,OAChBC,QAAWuC,EAAMvC,eAMrB+B,SAAW,WACT,OAAOa,MAAM,qDACXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAGA,EAAKC,KAAKxB,6FAMtBa,KAAKf,6CAIL,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdiC,KAAKhB,MAAMG,OAASa,KAAKC,iBAAmB,kBAxCjCW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.bdf6b10d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport \"./Movie.css\";\r\nimport PropType from 'prop-types';\r\nimport \"./App.js\";\r\n\r\n\r\n\r\nfunction Movie ({title,Poster,genres,summary}){\r\n    return(\r\n        <div className=\"Movie\">\r\n         <div className=\"Movie__Columns\">\r\n            <MoviePoster Poster={Poster} alt = {title}/>\r\n            </div>\r\n       <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        </div>\r\n        <div>\r\n            {genres.map((genre,index) => <Moviegenres genre={genre} key={index}/>)}\r\n        </div>\r\n        <p className=\"Movie_Synopsys\">\r\n        {summary}\r\n        </p>\r\n        </div>\r\n    )\r\n}\r\nfunction MoviePoster({Poster,alt}){\r\n    return(\r\n        <img src ={Poster} alt={alt}/>\r\n    )\r\n}\r\n\r\n\r\nfunction Moviegenres({genre}){\r\n    return(\r\n        <span className=\"genre_Column\">{genre}</span>\r\n    )\r\n}\r\n\r\nMoviePoster.PropType = {\r\n    poster: PropType.string.isRequired\r\n}\r\nMoviegenres.PropType = {\r\n    genres: PropType.string.isRequired\r\n}\r\n\r\nMovie.PropType = {\r\n    title:PropType.string.isRequired,\r\n    poster:PropType.string.isRequired,\r\n    Description : PropType.string.isRequired\r\n}\r\nexport default Movie;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie.js'\n\n\nclass App extends Component {\n  state = {}\n  \n_setMovie = async () =>{\n  \n  const movies = await this._callApi()\n  console.log(movies)\n  this.setState({\n    movies\n  })\n}\n\n_loadComponent = () =>{\n  const movies = this.state.movies.map((movie) =>{\n    return <Movie \n    title={movie.title_english} \n    Poster = {movie.large_cover_image} \n    key = {movie.id}\n    genres = {movie.genres}\n    summary = {movie.summary}\n    />\n  })\n  return movies\n}\n\n_callApi = () =>{\n  return fetch(\"https://yts.am/api/v2/list_movies.json?quality=3D\")\n   .then(response => response.json())\n   .then(json =>json.data.movies)\n   \n}\n\n\n  componentDidMount(){\n    this._setMovie()\n  }\n\n  render() {\n    return(\n      <div className='App'>\n      {this.state.movies ? this._loadComponent() : 'Loading' }\n         </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}